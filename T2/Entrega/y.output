Terminals which are not used

   KW_IF
   KW_THEN
   KW_ELSE
   KW_WHILE
   KW_LOOP
   KW_READ
   KW_PRINT
   KW_RETURN
   LIT_STRING
   TOKEN_ERROR


State 83 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_var_declaration ';' program
    2        | function ';' program
    3        | /* empty */

    4 global_var_declaration: TK_IDENTIFIER '=' type ':' lit
    5                       | vet_declaration

    6 type: KW_CHAR
    7     | KW_BOOL
    8     | KW_INT
    9     | KW_FLOAT

   10 lit: LIT_CHAR
   11    | LIT_INTEGER
   12    | LIT_FLOAT
   13    | LIT_TRUE
   14    | LIT_FALSE

   15 vet_declaration: TK_IDENTIFIER '=' vet_type

   16 vet_type: type '[' LIT_INTEGER ']' vet_maybe_value

   17 vet_maybe_value: ':' vet_value
   18                | /* empty */

   19 vet_value: LIT_INTEGER vet_value
   20          | LIT_FLOAT vet_value
   21          | LIT_CHAR vet_value
   22          | LIT_INTEGER
   23          | LIT_FLOAT
   24          | LIT_CHAR

   25 function: function_header command_block

   26 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type

   27 maybe_function_header_params: function_header_params
   28                             | /* empty */

   29 function_header_params: TK_IDENTIFIER '=' type ',' function_header_params
   30                       | TK_IDENTIFIER '=' type

   31 command_block: '{' command_seq '}'

   32 command_seq: command command_seq
   33            | /* empty */

   34 command: command_attr

   35 command_attr: TK_IDENTIFIER '=' expr
   36             | TK_IDENTIFIER '[' expr ']' '=' expr

   37 expr: expr operator expr
   38     | '(' expr ')'
   39     | TK_IDENTIFIER opt_array_index
   40     | lit
   41     | function_call

   42 opt_array_index: '[' expr ']'
   43                | /* empty */

   44 operator: operator_arith
   45         | operator_logic

   46 operator_arith: OPERATOR_PLUS
   47               | OPERATOR_MINUS
   48               | OPERATOR_MULT
   49               | OPERATOR_DIV

   50 operator_logic: OPERATOR_LE
   51               | OPERATOR_LT
   52               | OPERATOR_GE
   53               | OPERATOR_GT
   54               | OPERATOR_EQ
   55               | OPERATOR_DIF
   56               | OPERATOR_OR
   57               | OPERATOR_AND
   58               | OPERATOR_NOT

   59 function_call: TK_IDENTIFIER '(' function_call_args ')'

   60 function_call_args: expr
   61                   | expr ',' function_call_args


Terminals, with rules where they appear

$end (0) 0
'(' (40) 26 38 59
')' (41) 26 38 59
',' (44) 29 61
':' (58) 4 17
';' (59) 1 2
'=' (61) 4 15 26 29 30 35 36
'[' (91) 16 36 42
']' (93) 16 36 42
'{' (123) 31
'}' (125) 31
error (256)
KW_CHAR (258) 6
KW_INT (259) 8
KW_FLOAT (260) 9
KW_BOOL (261) 7
KW_IF (262)
KW_THEN (263)
KW_ELSE (264)
KW_WHILE (265)
KW_LOOP (266)
KW_READ (267)
KW_PRINT (268)
KW_RETURN (269)
OPERATOR_LE (270) 50
OPERATOR_LT (271) 51
OPERATOR_GE (272) 52
OPERATOR_GT (273) 53
OPERATOR_EQ (274) 54
OPERATOR_DIF (275) 55
OPERATOR_OR (276) 56
OPERATOR_AND (277) 57
OPERATOR_NOT (278) 58
OPERATOR_PLUS (279) 46
OPERATOR_MINUS (280) 47
OPERATOR_MULT (281) 48
OPERATOR_DIV (282) 49
TK_IDENTIFIER (283) 4 15 26 29 30 35 36 39 59
LIT_INTEGER (284) 11 16 19 22
LIT_FLOAT (285) 12 20 23
LIT_TRUE (286) 13
LIT_FALSE (287) 14
LIT_CHAR (288) 10 21 24
LIT_STRING (289)
TOKEN_ERROR (290)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2 3, on right: 0 1 2
global_var_declaration (48)
    on left: 4 5, on right: 1
type (49)
    on left: 6 7 8 9, on right: 4 16 26 29 30
lit (50)
    on left: 10 11 12 13 14, on right: 4 40
vet_declaration (51)
    on left: 15, on right: 5
vet_type (52)
    on left: 16, on right: 15
vet_maybe_value (53)
    on left: 17 18, on right: 16
vet_value (54)
    on left: 19 20 21 22 23 24, on right: 17 19 20 21
function (55)
    on left: 25, on right: 2
function_header (56)
    on left: 26, on right: 25
maybe_function_header_params (57)
    on left: 27 28, on right: 26
function_header_params (58)
    on left: 29 30, on right: 27 29
command_block (59)
    on left: 31, on right: 25
command_seq (60)
    on left: 32 33, on right: 31 32
command (61)
    on left: 34, on right: 32
command_attr (62)
    on left: 35 36, on right: 34
expr (63)
    on left: 37 38 39 40 41, on right: 35 36 37 38 42 60 61
opt_array_index (64)
    on left: 42 43, on right: 39
operator (65)
    on left: 44 45, on right: 37
operator_arith (66)
    on left: 46 47 48 49, on right: 44
operator_logic (67)
    on left: 50 51 52 53 54 55 56 57 58, on right: 45
function_call (68)
    on left: 59, on right: 41
function_call_args (69)
    on left: 60 61, on right: 59 61


state 0

    0 $accept: . program $end

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 2
    global_var_declaration  go to state 3
    vet_declaration         go to state 4
    function                go to state 5
    function_header         go to state 6


state 1

    4 global_var_declaration: TK_IDENTIFIER . '=' type ':' lit
   15 vet_declaration: TK_IDENTIFIER . '=' vet_type
   26 function_header: TK_IDENTIFIER . '(' maybe_function_header_params ')' '=' type

    '='  shift, and go to state 7
    '('  shift, and go to state 8


state 2

    0 $accept: program . $end

    $end  shift, and go to state 9


state 3

    1 program: global_var_declaration . ';' program

    ';'  shift, and go to state 10


state 4

    5 global_var_declaration: vet_declaration .

    $default  reduce using rule 5 (global_var_declaration)


state 5

    2 program: function . ';' program

    ';'  shift, and go to state 11


state 6

   25 function: function_header . command_block

    '{'  shift, and go to state 12

    command_block  go to state 13


state 7

    4 global_var_declaration: TK_IDENTIFIER '=' . type ':' lit
   15 vet_declaration: TK_IDENTIFIER '=' . vet_type

    KW_CHAR   shift, and go to state 14
    KW_INT    shift, and go to state 15
    KW_FLOAT  shift, and go to state 16
    KW_BOOL   shift, and go to state 17

    type      go to state 18
    vet_type  go to state 19


state 8

   26 function_header: TK_IDENTIFIER '(' . maybe_function_header_params ')' '=' type

    TK_IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 28 (maybe_function_header_params)

    maybe_function_header_params  go to state 21
    function_header_params        go to state 22


state 9

    0 $accept: program $end .

    $default  accept


state 10

    1 program: global_var_declaration ';' . program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 23
    global_var_declaration  go to state 3
    vet_declaration         go to state 4
    function                go to state 5
    function_header         go to state 6


state 11

    2 program: function ';' . program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 24
    global_var_declaration  go to state 3
    vet_declaration         go to state 4
    function                go to state 5
    function_header         go to state 6


state 12

   31 command_block: '{' . command_seq '}'

    TK_IDENTIFIER  shift, and go to state 25

    $default  reduce using rule 33 (command_seq)

    command_seq   go to state 26
    command       go to state 27
    command_attr  go to state 28


state 13

   25 function: function_header command_block .

    $default  reduce using rule 25 (function)


state 14

    6 type: KW_CHAR .

    $default  reduce using rule 6 (type)


state 15

    8 type: KW_INT .

    $default  reduce using rule 8 (type)


state 16

    9 type: KW_FLOAT .

    $default  reduce using rule 9 (type)


state 17

    7 type: KW_BOOL .

    $default  reduce using rule 7 (type)


state 18

    4 global_var_declaration: TK_IDENTIFIER '=' type . ':' lit
   16 vet_type: type . '[' LIT_INTEGER ']' vet_maybe_value

    ':'  shift, and go to state 29
    '['  shift, and go to state 30


state 19

   15 vet_declaration: TK_IDENTIFIER '=' vet_type .

    $default  reduce using rule 15 (vet_declaration)


state 20

   29 function_header_params: TK_IDENTIFIER . '=' type ',' function_header_params
   30                       | TK_IDENTIFIER . '=' type

    '='  shift, and go to state 31


state 21

   26 function_header: TK_IDENTIFIER '(' maybe_function_header_params . ')' '=' type

    ')'  shift, and go to state 32


state 22

   27 maybe_function_header_params: function_header_params .

    $default  reduce using rule 27 (maybe_function_header_params)


state 23

    1 program: global_var_declaration ';' program .

    $default  reduce using rule 1 (program)


state 24

    2 program: function ';' program .

    $default  reduce using rule 2 (program)


state 25

   35 command_attr: TK_IDENTIFIER . '=' expr
   36             | TK_IDENTIFIER . '[' expr ']' '=' expr

    '='  shift, and go to state 33
    '['  shift, and go to state 34


state 26

   31 command_block: '{' command_seq . '}'

    '}'  shift, and go to state 35


state 27

   32 command_seq: command . command_seq

    TK_IDENTIFIER  shift, and go to state 25

    $default  reduce using rule 33 (command_seq)

    command_seq   go to state 36
    command       go to state 27
    command_attr  go to state 28


state 28

   34 command: command_attr .

    $default  reduce using rule 34 (command)


state 29

    4 global_var_declaration: TK_IDENTIFIER '=' type ':' . lit

    LIT_INTEGER  shift, and go to state 37
    LIT_FLOAT    shift, and go to state 38
    LIT_TRUE     shift, and go to state 39
    LIT_FALSE    shift, and go to state 40
    LIT_CHAR     shift, and go to state 41

    lit  go to state 42


state 30

   16 vet_type: type '[' . LIT_INTEGER ']' vet_maybe_value

    LIT_INTEGER  shift, and go to state 43


state 31

   29 function_header_params: TK_IDENTIFIER '=' . type ',' function_header_params
   30                       | TK_IDENTIFIER '=' . type

    KW_CHAR   shift, and go to state 14
    KW_INT    shift, and go to state 15
    KW_FLOAT  shift, and go to state 16
    KW_BOOL   shift, and go to state 17

    type  go to state 44


state 32

   26 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' . '=' type

    '='  shift, and go to state 45


state 33

   35 command_attr: TK_IDENTIFIER '=' . expr

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 49
    function_call  go to state 50


state 34

   36 command_attr: TK_IDENTIFIER '[' . expr ']' '=' expr

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 51
    function_call  go to state 50


state 35

   31 command_block: '{' command_seq '}' .

    $default  reduce using rule 31 (command_block)


state 36

   32 command_seq: command command_seq .

    $default  reduce using rule 32 (command_seq)


state 37

   11 lit: LIT_INTEGER .

    $default  reduce using rule 11 (lit)


state 38

   12 lit: LIT_FLOAT .

    $default  reduce using rule 12 (lit)


state 39

   13 lit: LIT_TRUE .

    $default  reduce using rule 13 (lit)


state 40

   14 lit: LIT_FALSE .

    $default  reduce using rule 14 (lit)


state 41

   10 lit: LIT_CHAR .

    $default  reduce using rule 10 (lit)


state 42

    4 global_var_declaration: TK_IDENTIFIER '=' type ':' lit .

    $default  reduce using rule 4 (global_var_declaration)


state 43

   16 vet_type: type '[' LIT_INTEGER . ']' vet_maybe_value

    ']'  shift, and go to state 52


state 44

   29 function_header_params: TK_IDENTIFIER '=' type . ',' function_header_params
   30                       | TK_IDENTIFIER '=' type .

    ','  shift, and go to state 53

    $default  reduce using rule 30 (function_header_params)


state 45

   26 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' . type

    KW_CHAR   shift, and go to state 14
    KW_INT    shift, and go to state 15
    KW_FLOAT  shift, and go to state 16
    KW_BOOL   shift, and go to state 17

    type  go to state 54


state 46

   39 expr: TK_IDENTIFIER . opt_array_index
   59 function_call: TK_IDENTIFIER . '(' function_call_args ')'

    '['  shift, and go to state 55
    '('  shift, and go to state 56

    $default  reduce using rule 43 (opt_array_index)

    opt_array_index  go to state 57


state 47

   38 expr: '(' . expr ')'

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 58
    function_call  go to state 50


state 48

   40 expr: lit .

    $default  reduce using rule 40 (expr)


state 49

   35 command_attr: TK_IDENTIFIER '=' expr .
   37 expr: expr . operator expr

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71

    $default  reduce using rule 35 (command_attr)

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 50

   41 expr: function_call .

    $default  reduce using rule 41 (expr)


state 51

   36 command_attr: TK_IDENTIFIER '[' expr . ']' '=' expr
   37 expr: expr . operator expr

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71
    ']'             shift, and go to state 75

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 52

   16 vet_type: type '[' LIT_INTEGER ']' . vet_maybe_value

    ':'  shift, and go to state 76

    $default  reduce using rule 18 (vet_maybe_value)

    vet_maybe_value  go to state 77


state 53

   29 function_header_params: TK_IDENTIFIER '=' type ',' . function_header_params

    TK_IDENTIFIER  shift, and go to state 20

    function_header_params  go to state 78


state 54

   26 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type .

    $default  reduce using rule 26 (function_header)


state 55

   42 opt_array_index: '[' . expr ']'

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 79
    function_call  go to state 50


state 56

   59 function_call: TK_IDENTIFIER '(' . function_call_args ')'

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit                 go to state 48
    expr                go to state 80
    function_call       go to state 50
    function_call_args  go to state 81


state 57

   39 expr: TK_IDENTIFIER opt_array_index .

    $default  reduce using rule 39 (expr)


state 58

   37 expr: expr . operator expr
   38     | '(' expr . ')'

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71
    ')'             shift, and go to state 82

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 59

   50 operator_logic: OPERATOR_LE .

    $default  reduce using rule 50 (operator_logic)


state 60

   51 operator_logic: OPERATOR_LT .

    $default  reduce using rule 51 (operator_logic)


state 61

   52 operator_logic: OPERATOR_GE .

    $default  reduce using rule 52 (operator_logic)


state 62

   53 operator_logic: OPERATOR_GT .

    $default  reduce using rule 53 (operator_logic)


state 63

   54 operator_logic: OPERATOR_EQ .

    $default  reduce using rule 54 (operator_logic)


state 64

   55 operator_logic: OPERATOR_DIF .

    $default  reduce using rule 55 (operator_logic)


state 65

   56 operator_logic: OPERATOR_OR .

    $default  reduce using rule 56 (operator_logic)


state 66

   57 operator_logic: OPERATOR_AND .

    $default  reduce using rule 57 (operator_logic)


state 67

   58 operator_logic: OPERATOR_NOT .

    $default  reduce using rule 58 (operator_logic)


state 68

   46 operator_arith: OPERATOR_PLUS .

    $default  reduce using rule 46 (operator_arith)


state 69

   47 operator_arith: OPERATOR_MINUS .

    $default  reduce using rule 47 (operator_arith)


state 70

   48 operator_arith: OPERATOR_MULT .

    $default  reduce using rule 48 (operator_arith)


state 71

   49 operator_arith: OPERATOR_DIV .

    $default  reduce using rule 49 (operator_arith)


state 72

   37 expr: expr operator . expr

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 83
    function_call  go to state 50


state 73

   44 operator: operator_arith .

    $default  reduce using rule 44 (operator)


state 74

   45 operator: operator_logic .

    $default  reduce using rule 45 (operator)


state 75

   36 command_attr: TK_IDENTIFIER '[' expr ']' . '=' expr

    '='  shift, and go to state 84


state 76

   17 vet_maybe_value: ':' . vet_value

    LIT_INTEGER  shift, and go to state 85
    LIT_FLOAT    shift, and go to state 86
    LIT_CHAR     shift, and go to state 87

    vet_value  go to state 88


state 77

   16 vet_type: type '[' LIT_INTEGER ']' vet_maybe_value .

    $default  reduce using rule 16 (vet_type)


state 78

   29 function_header_params: TK_IDENTIFIER '=' type ',' function_header_params .

    $default  reduce using rule 29 (function_header_params)


state 79

   37 expr: expr . operator expr
   42 opt_array_index: '[' expr . ']'

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71
    ']'             shift, and go to state 89

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 80

   37 expr: expr . operator expr
   60 function_call_args: expr .
   61                   | expr . ',' function_call_args

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71
    ','             shift, and go to state 90

    $default  reduce using rule 60 (function_call_args)

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 81

   59 function_call: TK_IDENTIFIER '(' function_call_args . ')'

    ')'  shift, and go to state 91


state 82

   38 expr: '(' expr ')' .

    $default  reduce using rule 38 (expr)


state 83

   37 expr: expr . operator expr
   37     | expr operator expr .

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71

    OPERATOR_LE     [reduce using rule 37 (expr)]
    OPERATOR_LT     [reduce using rule 37 (expr)]
    OPERATOR_GE     [reduce using rule 37 (expr)]
    OPERATOR_GT     [reduce using rule 37 (expr)]
    OPERATOR_EQ     [reduce using rule 37 (expr)]
    OPERATOR_DIF    [reduce using rule 37 (expr)]
    OPERATOR_OR     [reduce using rule 37 (expr)]
    OPERATOR_AND    [reduce using rule 37 (expr)]
    OPERATOR_NOT    [reduce using rule 37 (expr)]
    OPERATOR_PLUS   [reduce using rule 37 (expr)]
    OPERATOR_MINUS  [reduce using rule 37 (expr)]
    OPERATOR_MULT   [reduce using rule 37 (expr)]
    OPERATOR_DIV    [reduce using rule 37 (expr)]
    $default        reduce using rule 37 (expr)

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 84

   36 command_attr: TK_IDENTIFIER '[' expr ']' '=' . expr

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit            go to state 48
    expr           go to state 92
    function_call  go to state 50


state 85

   19 vet_value: LIT_INTEGER . vet_value
   22          | LIT_INTEGER .

    LIT_INTEGER  shift, and go to state 85
    LIT_FLOAT    shift, and go to state 86
    LIT_CHAR     shift, and go to state 87

    $default  reduce using rule 22 (vet_value)

    vet_value  go to state 93


state 86

   20 vet_value: LIT_FLOAT . vet_value
   23          | LIT_FLOAT .

    LIT_INTEGER  shift, and go to state 85
    LIT_FLOAT    shift, and go to state 86
    LIT_CHAR     shift, and go to state 87

    $default  reduce using rule 23 (vet_value)

    vet_value  go to state 94


state 87

   21 vet_value: LIT_CHAR . vet_value
   24          | LIT_CHAR .

    LIT_INTEGER  shift, and go to state 85
    LIT_FLOAT    shift, and go to state 86
    LIT_CHAR     shift, and go to state 87

    $default  reduce using rule 24 (vet_value)

    vet_value  go to state 95


state 88

   17 vet_maybe_value: ':' vet_value .

    $default  reduce using rule 17 (vet_maybe_value)


state 89

   42 opt_array_index: '[' expr ']' .

    $default  reduce using rule 42 (opt_array_index)


state 90

   61 function_call_args: expr ',' . function_call_args

    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 37
    LIT_FLOAT      shift, and go to state 38
    LIT_TRUE       shift, and go to state 39
    LIT_FALSE      shift, and go to state 40
    LIT_CHAR       shift, and go to state 41
    '('            shift, and go to state 47

    lit                 go to state 48
    expr                go to state 80
    function_call       go to state 50
    function_call_args  go to state 96


state 91

   59 function_call: TK_IDENTIFIER '(' function_call_args ')' .

    $default  reduce using rule 59 (function_call)


state 92

   36 command_attr: TK_IDENTIFIER '[' expr ']' '=' expr .
   37 expr: expr . operator expr

    OPERATOR_LE     shift, and go to state 59
    OPERATOR_LT     shift, and go to state 60
    OPERATOR_GE     shift, and go to state 61
    OPERATOR_GT     shift, and go to state 62
    OPERATOR_EQ     shift, and go to state 63
    OPERATOR_DIF    shift, and go to state 64
    OPERATOR_OR     shift, and go to state 65
    OPERATOR_AND    shift, and go to state 66
    OPERATOR_NOT    shift, and go to state 67
    OPERATOR_PLUS   shift, and go to state 68
    OPERATOR_MINUS  shift, and go to state 69
    OPERATOR_MULT   shift, and go to state 70
    OPERATOR_DIV    shift, and go to state 71

    $default  reduce using rule 36 (command_attr)

    operator        go to state 72
    operator_arith  go to state 73
    operator_logic  go to state 74


state 93

   19 vet_value: LIT_INTEGER vet_value .

    $default  reduce using rule 19 (vet_value)


state 94

   20 vet_value: LIT_FLOAT vet_value .

    $default  reduce using rule 20 (vet_value)


state 95

   21 vet_value: LIT_CHAR vet_value .

    $default  reduce using rule 21 (vet_value)


state 96

   61 function_call_args: expr ',' function_call_args .

    $default  reduce using rule 61 (function_call_args)
