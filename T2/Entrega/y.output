Terminals unused in grammar

    TOKEN_ERROR


State 11 conflicts: 9 shift/reduce
State 32 conflicts: 9 shift/reduce
State 96 conflicts: 8 shift/reduce
State 120 conflicts: 8 shift/reduce
State 136 conflicts: 1 shift/reduce
State 150 conflicts: 8 shift/reduce
State 153 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_var_declaration ';' program
    2        | function ';' program
    3        | %empty

    4 global_var_declaration: TK_IDENTIFIER '=' type global_var_or_vet_declaration

    5 global_var_or_vet_declaration: ':' lit
    6                              | '[' LIT_INTEGER ']' vet_maybe_value

    7 type: KW_CHAR
    8     | KW_BOOL
    9     | KW_INT
   10     | KW_FLOAT

   11 lit: LIT_CHAR
   12    | LIT_INTEGER
   13    | LIT_FLOAT
   14    | LIT_TRUE
   15    | LIT_FALSE

   16 vet_maybe_value: ':' vet_value
   17                | %empty

   18 vet_value: LIT_INTEGER vet_value
   19          | LIT_FLOAT vet_value
   20          | LIT_CHAR vet_value
   21          | LIT_TRUE vet_value
   22          | LIT_FALSE vet_value
   23          | LIT_INTEGER
   24          | LIT_FLOAT
   25          | LIT_CHAR
   26          | LIT_TRUE
   27          | LIT_FALSE

   28 function: function_header command_block

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type

   30 maybe_function_header_params: TK_IDENTIFIER '=' KW_CHAR function_header_params
   31                             | TK_IDENTIFIER '=' KW_BOOL function_header_params
   32                             | TK_IDENTIFIER '=' KW_INT function_header_params
   33                             | TK_IDENTIFIER '=' KW_FLOAT function_header_params
   34                             | %empty

   35 function_header_params: ',' TK_IDENTIFIER '=' KW_CHAR maybe_function_header_params
   36                       | ',' TK_IDENTIFIER '=' KW_BOOL maybe_function_header_params
   37                       | ',' TK_IDENTIFIER '=' KW_INT maybe_function_header_params
   38                       | ',' TK_IDENTIFIER '=' KW_FLOAT maybe_function_header_params
   39                       | %empty

   40 command_block: '{' command_seq

   41 command_seq: command command_seq
   42            | '}'

   43 command: TK_IDENTIFIER '=' expr
   44        | TK_IDENTIFIER '[' expr ']' '=' expr
   45        | KW_READ TK_IDENTIFIER
   46        | KW_RETURN expr
   47        | KW_IF '(' expr ')' KW_THEN command maybe_else
   48        | KW_WHILE '(' expr ')' command
   49        | KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command
   50        | KW_PRINT LIT_STRING maybe_print_elems
   51        | KW_PRINT expr maybe_print_elems
   52        | command_block
   53        | %empty

   54 maybe_print_elems: ',' LIT_STRING maybe_print_elems
   55                  | ',' expr maybe_print_elems
   56                  | %empty

   57 maybe_else: KW_ELSE command
   58           | %empty

   59 expr_cont_list: ',' expr expr_cont_list
   60               | %empty

   61 expr: expr OPERATOR_PLUS expr
   62     | expr OPERATOR_MINUS expr
   63     | expr OPERATOR_MULT expr
   64     | expr OPERATOR_DIV expr
   65     | expr OPERATOR_LE expr
   66     | expr OPERATOR_LT expr
   67     | expr OPERATOR_GE expr
   68     | expr OPERATOR_GT expr
   69     | expr OPERATOR_EQ expr
   70     | expr OPERATOR_DIF expr
   71     | expr OPERATOR_OR expr
   72     | expr OPERATOR_AND expr
   73     | '(' expr ')'
   74     | OPERATOR_NOT expr
   75     | TK_IDENTIFIER
   76     | TK_IDENTIFIER '[' expr ']'
   77     | TK_IDENTIFIER '(' function_call_args ')'
   78     | lit

   79 function_call_args: expr
   80                   | expr ',' function_call_args


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 29 47 48 49 73 77
    ')' (41) 29 47 48 49 73 77
    ',' (44) 35 36 37 38 54 55 59 80
    ':' (58) 5 16 49
    ';' (59) 1 2
    '=' (61) 4 29 30 31 32 33 35 36 37 38 43 44
    '[' (91) 6 44 76
    ']' (93) 6 44 76
    '{' (123) 40
    '}' (125) 42
    error (256)
    KW_CHAR (258) 7 30 35
    KW_INT (259) 9 32 37
    KW_FLOAT (260) 10 33 38
    KW_BOOL (261) 8 31 36
    KW_IF (262) 47
    KW_THEN (263) 47
    KW_ELSE (264) 57
    KW_WHILE (265) 48
    KW_LOOP (266) 49
    KW_READ (267) 45
    KW_PRINT (268) 50 51
    KW_RETURN (269) 46
    OPERATOR_LE (270) 65
    OPERATOR_LT (271) 66
    OPERATOR_GE (272) 67
    OPERATOR_GT (273) 68
    OPERATOR_EQ (274) 69
    OPERATOR_DIF (275) 70
    OPERATOR_OR (276) 71
    OPERATOR_AND (277) 72
    OPERATOR_NOT (278) 74
    OPERATOR_PLUS (279) 61
    OPERATOR_MINUS (280) 62
    OPERATOR_MULT (281) 63
    OPERATOR_DIV (282) 64
    TK_IDENTIFIER (283) 4 29 30 31 32 33 35 36 37 38 43 44 45 49 75 76 77
    LIT_INTEGER (284) 6 12 18 23
    LIT_FLOAT (285) 13 19 24
    LIT_TRUE (286) 14 21 26
    LIT_FALSE (287) 15 22 27
    LIT_CHAR (288) 11 20 25
    LIT_STRING (289) 50 54
    TOKEN_ERROR (290)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3
        on right: 0 1 2
    global_var_declaration (48)
        on left: 4
        on right: 1
    global_var_or_vet_declaration (49)
        on left: 5 6
        on right: 4
    type (50)
        on left: 7 8 9 10
        on right: 4 29
    lit (51)
        on left: 11 12 13 14 15
        on right: 5 78
    vet_maybe_value (52)
        on left: 16 17
        on right: 6
    vet_value (53)
        on left: 18 19 20 21 22 23 24 25 26 27
        on right: 16 18 19 20 21 22
    function (54)
        on left: 28
        on right: 2
    function_header (55)
        on left: 29
        on right: 28
    maybe_function_header_params (56)
        on left: 30 31 32 33 34
        on right: 29 35 36 37 38
    function_header_params (57)
        on left: 35 36 37 38 39
        on right: 30 31 32 33
    command_block (58)
        on left: 40
        on right: 28 52
    command_seq (59)
        on left: 41 42
        on right: 40 41
    command (60)
        on left: 43 44 45 46 47 48 49 50 51 52 53
        on right: 41 47 48 49 57
    maybe_print_elems (61)
        on left: 54 55 56
        on right: 50 51 54 55
    maybe_else (62)
        on left: 57 58
        on right: 47
    expr_cont_list (63)
        on left: 59 60
        on right: 49 59
    expr (64)
        on left: 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 43 44 46 47 48 49 51 55 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 76 79 80
    function_call_args (65)
        on left: 79 80
        on right: 77 80


State 0

    0 $accept: • program $end

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 2
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 1

    4 global_var_declaration: TK_IDENTIFIER • '=' type global_var_or_vet_declaration
   29 function_header: TK_IDENTIFIER • '(' maybe_function_header_params ')' '=' type

    '='  shift, and go to state 6
    '('  shift, and go to state 7


State 2

    0 $accept: program • $end

    $end  shift, and go to state 8


State 3

    1 program: global_var_declaration • ';' program

    ';'  shift, and go to state 9


State 4

    2 program: function • ';' program

    ';'  shift, and go to state 10


State 5

   28 function: function_header • command_block

    '{'  shift, and go to state 11

    command_block  go to state 12


State 6

    4 global_var_declaration: TK_IDENTIFIER '=' • type global_var_or_vet_declaration

    KW_CHAR   shift, and go to state 13
    KW_INT    shift, and go to state 14
    KW_FLOAT  shift, and go to state 15
    KW_BOOL   shift, and go to state 16

    type  go to state 17


State 7

   29 function_header: TK_IDENTIFIER '(' • maybe_function_header_params ')' '=' type

    TK_IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 34 (maybe_function_header_params)

    maybe_function_header_params  go to state 19


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: global_var_declaration ';' • program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 20
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 10

    2 program: function ';' • program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 21
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 11

   40 command_block: '{' • command_seq

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11
    '}'            shift, and go to state 29

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    '}'            [reduce using rule 53 (command)]

    command_block  go to state 30
    command_seq    go to state 31
    command        go to state 32


State 12

   28 function: function_header command_block •

    $default  reduce using rule 28 (function)


State 13

    7 type: KW_CHAR •

    $default  reduce using rule 7 (type)


State 14

    9 type: KW_INT •

    $default  reduce using rule 9 (type)


State 15

   10 type: KW_FLOAT •

    $default  reduce using rule 10 (type)


State 16

    8 type: KW_BOOL •

    $default  reduce using rule 8 (type)


State 17

    4 global_var_declaration: TK_IDENTIFIER '=' type • global_var_or_vet_declaration

    ':'  shift, and go to state 33
    '['  shift, and go to state 34

    global_var_or_vet_declaration  go to state 35


State 18

   30 maybe_function_header_params: TK_IDENTIFIER • '=' KW_CHAR function_header_params
   31                             | TK_IDENTIFIER • '=' KW_BOOL function_header_params
   32                             | TK_IDENTIFIER • '=' KW_INT function_header_params
   33                             | TK_IDENTIFIER • '=' KW_FLOAT function_header_params

    '='  shift, and go to state 36


State 19

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params • ')' '=' type

    ')'  shift, and go to state 37


State 20

    1 program: global_var_declaration ';' program •

    $default  reduce using rule 1 (program)


State 21

    2 program: function ';' program •

    $default  reduce using rule 2 (program)


State 22

   47 command: KW_IF • '(' expr ')' KW_THEN command maybe_else

    '('  shift, and go to state 38


State 23

   48 command: KW_WHILE • '(' expr ')' command

    '('  shift, and go to state 39


State 24

   49 command: KW_LOOP • '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command

    '('  shift, and go to state 40


State 25

   45 command: KW_READ • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 41


State 26

   50 command: KW_PRINT • LIT_STRING maybe_print_elems
   51        | KW_PRINT • expr maybe_print_elems

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    LIT_STRING     shift, and go to state 49
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 52


State 27

   46 command: KW_RETURN • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 53


State 28

   43 command: TK_IDENTIFIER • '=' expr
   44        | TK_IDENTIFIER • '[' expr ']' '=' expr

    '='  shift, and go to state 54
    '['  shift, and go to state 55


State 29

   42 command_seq: '}' •

    $default  reduce using rule 42 (command_seq)


State 30

   52 command: command_block •

    $default  reduce using rule 52 (command)


State 31

   40 command_block: '{' command_seq •

    $default  reduce using rule 40 (command_block)


State 32

   41 command_seq: command • command_seq

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11
    '}'            shift, and go to state 29

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    '}'            [reduce using rule 53 (command)]

    command_block  go to state 30
    command_seq    go to state 56
    command        go to state 32


State 33

    5 global_var_or_vet_declaration: ':' • lit

    LIT_INTEGER  shift, and go to state 44
    LIT_FLOAT    shift, and go to state 45
    LIT_TRUE     shift, and go to state 46
    LIT_FALSE    shift, and go to state 47
    LIT_CHAR     shift, and go to state 48

    lit  go to state 57


State 34

    6 global_var_or_vet_declaration: '[' • LIT_INTEGER ']' vet_maybe_value

    LIT_INTEGER  shift, and go to state 58


State 35

    4 global_var_declaration: TK_IDENTIFIER '=' type global_var_or_vet_declaration •

    $default  reduce using rule 4 (global_var_declaration)


State 36

   30 maybe_function_header_params: TK_IDENTIFIER '=' • KW_CHAR function_header_params
   31                             | TK_IDENTIFIER '=' • KW_BOOL function_header_params
   32                             | TK_IDENTIFIER '=' • KW_INT function_header_params
   33                             | TK_IDENTIFIER '=' • KW_FLOAT function_header_params

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61
    KW_BOOL   shift, and go to state 62


State 37

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' • '=' type

    '='  shift, and go to state 63


State 38

   47 command: KW_IF '(' • expr ')' KW_THEN command maybe_else

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 64


State 39

   48 command: KW_WHILE '(' • expr ')' command

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 65


State 40

   49 command: KW_LOOP '(' • TK_IDENTIFIER ':' expr expr_cont_list ')' command

    TK_IDENTIFIER  shift, and go to state 66


State 41

   45 command: KW_READ TK_IDENTIFIER •

    $default  reduce using rule 45 (command)


State 42

   74 expr: OPERATOR_NOT • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 67


State 43

   75 expr: TK_IDENTIFIER •
   76     | TK_IDENTIFIER • '[' expr ']'
   77     | TK_IDENTIFIER • '(' function_call_args ')'

    '['  shift, and go to state 68
    '('  shift, and go to state 69

    $default  reduce using rule 75 (expr)


State 44

   12 lit: LIT_INTEGER •

    $default  reduce using rule 12 (lit)


State 45

   13 lit: LIT_FLOAT •

    $default  reduce using rule 13 (lit)


State 46

   14 lit: LIT_TRUE •

    $default  reduce using rule 14 (lit)


State 47

   15 lit: LIT_FALSE •

    $default  reduce using rule 15 (lit)


State 48

   11 lit: LIT_CHAR •

    $default  reduce using rule 11 (lit)


State 49

   50 command: KW_PRINT LIT_STRING • maybe_print_elems

    ','  shift, and go to state 70

    $default  reduce using rule 56 (maybe_print_elems)

    maybe_print_elems  go to state 71


State 50

   73 expr: '(' • expr ')'

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 72


State 51

   78 expr: lit •

    $default  reduce using rule 78 (expr)


State 52

   51 command: KW_PRINT expr • maybe_print_elems
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ','             shift, and go to state 70

    $default  reduce using rule 56 (maybe_print_elems)

    maybe_print_elems  go to state 85


State 53

   46 command: KW_RETURN expr •
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 46 (command)


State 54

   43 command: TK_IDENTIFIER '=' • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 86


State 55

   44 command: TK_IDENTIFIER '[' • expr ']' '=' expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 87


State 56

   41 command_seq: command command_seq •

    $default  reduce using rule 41 (command_seq)


State 57

    5 global_var_or_vet_declaration: ':' lit •

    $default  reduce using rule 5 (global_var_or_vet_declaration)


State 58

    6 global_var_or_vet_declaration: '[' LIT_INTEGER • ']' vet_maybe_value

    ']'  shift, and go to state 88


State 59

   30 maybe_function_header_params: TK_IDENTIFIER '=' KW_CHAR • function_header_params

    ','  shift, and go to state 89

    $default  reduce using rule 39 (function_header_params)

    function_header_params  go to state 90


State 60

   32 maybe_function_header_params: TK_IDENTIFIER '=' KW_INT • function_header_params

    ','  shift, and go to state 89

    $default  reduce using rule 39 (function_header_params)

    function_header_params  go to state 91


State 61

   33 maybe_function_header_params: TK_IDENTIFIER '=' KW_FLOAT • function_header_params

    ','  shift, and go to state 89

    $default  reduce using rule 39 (function_header_params)

    function_header_params  go to state 92


State 62

   31 maybe_function_header_params: TK_IDENTIFIER '=' KW_BOOL • function_header_params

    ','  shift, and go to state 89

    $default  reduce using rule 39 (function_header_params)

    function_header_params  go to state 93


State 63

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' • type

    KW_CHAR   shift, and go to state 13
    KW_INT    shift, and go to state 14
    KW_FLOAT  shift, and go to state 15
    KW_BOOL   shift, and go to state 16

    type  go to state 94


State 64

   47 command: KW_IF '(' expr • ')' KW_THEN command maybe_else
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ')'             shift, and go to state 95


State 65

   48 command: KW_WHILE '(' expr • ')' command
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ')'             shift, and go to state 96


State 66

   49 command: KW_LOOP '(' TK_IDENTIFIER • ':' expr expr_cont_list ')' command

    ':'  shift, and go to state 97


State 67

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr
   74     | OPERATOR_NOT expr •

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 74 (expr)


State 68

   76 expr: TK_IDENTIFIER '[' • expr ']'

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 98


State 69

   77 expr: TK_IDENTIFIER '(' • function_call_args ')'

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit                 go to state 51
    expr                go to state 99
    function_call_args  go to state 100


State 70

   54 maybe_print_elems: ',' • LIT_STRING maybe_print_elems
   55                  | ',' • expr maybe_print_elems

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    LIT_STRING     shift, and go to state 101
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 102


State 71

   50 command: KW_PRINT LIT_STRING maybe_print_elems •

    $default  reduce using rule 50 (command)


State 72

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr
   73     | '(' expr • ')'

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ')'             shift, and go to state 103


State 73

   65 expr: expr OPERATOR_LE • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 104


State 74

   66 expr: expr OPERATOR_LT • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 105


State 75

   67 expr: expr OPERATOR_GE • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 106


State 76

   68 expr: expr OPERATOR_GT • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 107


State 77

   69 expr: expr OPERATOR_EQ • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 108


State 78

   70 expr: expr OPERATOR_DIF • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 109


State 79

   71 expr: expr OPERATOR_OR • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 110


State 80

   72 expr: expr OPERATOR_AND • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 111


State 81

   61 expr: expr OPERATOR_PLUS • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 112


State 82

   62 expr: expr OPERATOR_MINUS • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 113


State 83

   63 expr: expr OPERATOR_MULT • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 114


State 84

   64 expr: expr OPERATOR_DIV • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 115


State 85

   51 command: KW_PRINT expr maybe_print_elems •

    $default  reduce using rule 51 (command)


State 86

   43 command: TK_IDENTIFIER '=' expr •
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 43 (command)


State 87

   44 command: TK_IDENTIFIER '[' expr • ']' '=' expr
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ']'             shift, and go to state 116


State 88

    6 global_var_or_vet_declaration: '[' LIT_INTEGER ']' • vet_maybe_value

    ':'  shift, and go to state 117

    $default  reduce using rule 17 (vet_maybe_value)

    vet_maybe_value  go to state 118


State 89

   35 function_header_params: ',' • TK_IDENTIFIER '=' KW_CHAR maybe_function_header_params
   36                       | ',' • TK_IDENTIFIER '=' KW_BOOL maybe_function_header_params
   37                       | ',' • TK_IDENTIFIER '=' KW_INT maybe_function_header_params
   38                       | ',' • TK_IDENTIFIER '=' KW_FLOAT maybe_function_header_params

    TK_IDENTIFIER  shift, and go to state 119


State 90

   30 maybe_function_header_params: TK_IDENTIFIER '=' KW_CHAR function_header_params •

    $default  reduce using rule 30 (maybe_function_header_params)


State 91

   32 maybe_function_header_params: TK_IDENTIFIER '=' KW_INT function_header_params •

    $default  reduce using rule 32 (maybe_function_header_params)


State 92

   33 maybe_function_header_params: TK_IDENTIFIER '=' KW_FLOAT function_header_params •

    $default  reduce using rule 33 (maybe_function_header_params)


State 93

   31 maybe_function_header_params: TK_IDENTIFIER '=' KW_BOOL function_header_params •

    $default  reduce using rule 31 (maybe_function_header_params)


State 94

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type •

    $default  reduce using rule 29 (function_header)


State 95

   47 command: KW_IF '(' expr ')' • KW_THEN command maybe_else

    KW_THEN  shift, and go to state 120


State 96

   48 command: KW_WHILE '(' expr ')' • command

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    $default       reduce using rule 53 (command)

    command_block  go to state 30
    command        go to state 121


State 97

   49 command: KW_LOOP '(' TK_IDENTIFIER ':' • expr expr_cont_list ')' command

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 122


State 98

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr
   76     | TK_IDENTIFIER '[' expr • ']'

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ']'             shift, and go to state 123


State 99

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr
   79 function_call_args: expr •
   80                   | expr • ',' function_call_args

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ','             shift, and go to state 124

    $default  reduce using rule 79 (function_call_args)


State 100

   77 expr: TK_IDENTIFIER '(' function_call_args • ')'

    ')'  shift, and go to state 125


State 101

   54 maybe_print_elems: ',' LIT_STRING • maybe_print_elems

    ','  shift, and go to state 70

    $default  reduce using rule 56 (maybe_print_elems)

    maybe_print_elems  go to state 126


State 102

   55 maybe_print_elems: ',' expr • maybe_print_elems
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ','             shift, and go to state 70

    $default  reduce using rule 56 (maybe_print_elems)

    maybe_print_elems  go to state 127


State 103

   73 expr: '(' expr ')' •

    $default  reduce using rule 73 (expr)


State 104

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   65     | expr OPERATOR_LE expr •
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 65 (expr)


State 105

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   66     | expr OPERATOR_LT expr •
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 66 (expr)


State 106

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   67     | expr OPERATOR_GE expr •
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 67 (expr)


State 107

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   68     | expr OPERATOR_GT expr •
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 68 (expr)


State 108

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   69     | expr OPERATOR_EQ expr •
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 69 (expr)


State 109

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   70     | expr OPERATOR_DIF expr •
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 70 (expr)


State 110

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   71     | expr OPERATOR_OR expr •
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 71 (expr)


State 111

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr
   72     | expr OPERATOR_AND expr •

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 72 (expr)


State 112

   61 expr: expr • OPERATOR_PLUS expr
   61     | expr OPERATOR_PLUS expr •
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_MULT  shift, and go to state 83
    OPERATOR_DIV   shift, and go to state 84

    $default  reduce using rule 61 (expr)


State 113

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   62     | expr OPERATOR_MINUS expr •
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_MULT  shift, and go to state 83
    OPERATOR_DIV   shift, and go to state 84

    $default  reduce using rule 62 (expr)


State 114

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   63     | expr OPERATOR_MULT expr •
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    $default  reduce using rule 63 (expr)


State 115

   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   64     | expr OPERATOR_DIV expr •
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    $default  reduce using rule 64 (expr)


State 116

   44 command: TK_IDENTIFIER '[' expr ']' • '=' expr

    '='  shift, and go to state 128


State 117

   16 vet_maybe_value: ':' • vet_value

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    vet_value  go to state 134


State 118

    6 global_var_or_vet_declaration: '[' LIT_INTEGER ']' vet_maybe_value •

    $default  reduce using rule 6 (global_var_or_vet_declaration)


State 119

   35 function_header_params: ',' TK_IDENTIFIER • '=' KW_CHAR maybe_function_header_params
   36                       | ',' TK_IDENTIFIER • '=' KW_BOOL maybe_function_header_params
   37                       | ',' TK_IDENTIFIER • '=' KW_INT maybe_function_header_params
   38                       | ',' TK_IDENTIFIER • '=' KW_FLOAT maybe_function_header_params

    '='  shift, and go to state 135


State 120

   47 command: KW_IF '(' expr ')' KW_THEN • command maybe_else

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    $default       reduce using rule 53 (command)

    command_block  go to state 30
    command        go to state 136


State 121

   48 command: KW_WHILE '(' expr ')' command •

    $default  reduce using rule 48 (command)


State 122

   49 command: KW_LOOP '(' TK_IDENTIFIER ':' expr • expr_cont_list ')' command
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ','             shift, and go to state 137

    $default  reduce using rule 60 (expr_cont_list)

    expr_cont_list  go to state 138


State 123

   76 expr: TK_IDENTIFIER '[' expr ']' •

    $default  reduce using rule 76 (expr)


State 124

   80 function_call_args: expr ',' • function_call_args

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit                 go to state 51
    expr                go to state 99
    function_call_args  go to state 139


State 125

   77 expr: TK_IDENTIFIER '(' function_call_args ')' •

    $default  reduce using rule 77 (expr)


State 126

   54 maybe_print_elems: ',' LIT_STRING maybe_print_elems •

    $default  reduce using rule 54 (maybe_print_elems)


State 127

   55 maybe_print_elems: ',' expr maybe_print_elems •

    $default  reduce using rule 55 (maybe_print_elems)


State 128

   44 command: TK_IDENTIFIER '[' expr ']' '=' • expr

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 140


State 129

   18 vet_value: LIT_INTEGER • vet_value
   23          | LIT_INTEGER •

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    $default  reduce using rule 23 (vet_value)

    vet_value  go to state 141


State 130

   19 vet_value: LIT_FLOAT • vet_value
   24          | LIT_FLOAT •

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    $default  reduce using rule 24 (vet_value)

    vet_value  go to state 142


State 131

   21 vet_value: LIT_TRUE • vet_value
   26          | LIT_TRUE •

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    $default  reduce using rule 26 (vet_value)

    vet_value  go to state 143


State 132

   22 vet_value: LIT_FALSE • vet_value
   27          | LIT_FALSE •

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    $default  reduce using rule 27 (vet_value)

    vet_value  go to state 144


State 133

   20 vet_value: LIT_CHAR • vet_value
   25          | LIT_CHAR •

    LIT_INTEGER  shift, and go to state 129
    LIT_FLOAT    shift, and go to state 130
    LIT_TRUE     shift, and go to state 131
    LIT_FALSE    shift, and go to state 132
    LIT_CHAR     shift, and go to state 133

    $default  reduce using rule 25 (vet_value)

    vet_value  go to state 145


State 134

   16 vet_maybe_value: ':' vet_value •

    $default  reduce using rule 16 (vet_maybe_value)


State 135

   35 function_header_params: ',' TK_IDENTIFIER '=' • KW_CHAR maybe_function_header_params
   36                       | ',' TK_IDENTIFIER '=' • KW_BOOL maybe_function_header_params
   37                       | ',' TK_IDENTIFIER '=' • KW_INT maybe_function_header_params
   38                       | ',' TK_IDENTIFIER '=' • KW_FLOAT maybe_function_header_params

    KW_CHAR   shift, and go to state 146
    KW_INT    shift, and go to state 147
    KW_FLOAT  shift, and go to state 148
    KW_BOOL   shift, and go to state 149


State 136

   47 command: KW_IF '(' expr ')' KW_THEN command • maybe_else

    KW_ELSE  shift, and go to state 150

    KW_ELSE   [reduce using rule 58 (maybe_else)]
    $default  reduce using rule 58 (maybe_else)

    maybe_else  go to state 151


State 137

   59 expr_cont_list: ',' • expr expr_cont_list

    OPERATOR_NOT   shift, and go to state 42
    TK_IDENTIFIER  shift, and go to state 43
    LIT_INTEGER    shift, and go to state 44
    LIT_FLOAT      shift, and go to state 45
    LIT_TRUE       shift, and go to state 46
    LIT_FALSE      shift, and go to state 47
    LIT_CHAR       shift, and go to state 48
    '('            shift, and go to state 50

    lit   go to state 51
    expr  go to state 152


State 138

   49 command: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list • ')' command

    ')'  shift, and go to state 153


State 139

   80 function_call_args: expr ',' function_call_args •

    $default  reduce using rule 80 (function_call_args)


State 140

   44 command: TK_IDENTIFIER '[' expr ']' '=' expr •
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84

    $default  reduce using rule 44 (command)


State 141

   18 vet_value: LIT_INTEGER vet_value •

    $default  reduce using rule 18 (vet_value)


State 142

   19 vet_value: LIT_FLOAT vet_value •

    $default  reduce using rule 19 (vet_value)


State 143

   21 vet_value: LIT_TRUE vet_value •

    $default  reduce using rule 21 (vet_value)


State 144

   22 vet_value: LIT_FALSE vet_value •

    $default  reduce using rule 22 (vet_value)


State 145

   20 vet_value: LIT_CHAR vet_value •

    $default  reduce using rule 20 (vet_value)


State 146

   35 function_header_params: ',' TK_IDENTIFIER '=' KW_CHAR • maybe_function_header_params

    TK_IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 34 (maybe_function_header_params)

    maybe_function_header_params  go to state 154


State 147

   37 function_header_params: ',' TK_IDENTIFIER '=' KW_INT • maybe_function_header_params

    TK_IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 34 (maybe_function_header_params)

    maybe_function_header_params  go to state 155


State 148

   38 function_header_params: ',' TK_IDENTIFIER '=' KW_FLOAT • maybe_function_header_params

    TK_IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 34 (maybe_function_header_params)

    maybe_function_header_params  go to state 156


State 149

   36 function_header_params: ',' TK_IDENTIFIER '=' KW_BOOL • maybe_function_header_params

    TK_IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 34 (maybe_function_header_params)

    maybe_function_header_params  go to state 157


State 150

   57 maybe_else: KW_ELSE • command

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    $default       reduce using rule 53 (command)

    command_block  go to state 30
    command        go to state 158


State 151

   47 command: KW_IF '(' expr ')' KW_THEN command maybe_else •

    $default  reduce using rule 47 (command)


State 152

   59 expr_cont_list: ',' expr • expr_cont_list
   61 expr: expr • OPERATOR_PLUS expr
   62     | expr • OPERATOR_MINUS expr
   63     | expr • OPERATOR_MULT expr
   64     | expr • OPERATOR_DIV expr
   65     | expr • OPERATOR_LE expr
   66     | expr • OPERATOR_LT expr
   67     | expr • OPERATOR_GE expr
   68     | expr • OPERATOR_GT expr
   69     | expr • OPERATOR_EQ expr
   70     | expr • OPERATOR_DIF expr
   71     | expr • OPERATOR_OR expr
   72     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 73
    OPERATOR_LT     shift, and go to state 74
    OPERATOR_GE     shift, and go to state 75
    OPERATOR_GT     shift, and go to state 76
    OPERATOR_EQ     shift, and go to state 77
    OPERATOR_DIF    shift, and go to state 78
    OPERATOR_OR     shift, and go to state 79
    OPERATOR_AND    shift, and go to state 80
    OPERATOR_PLUS   shift, and go to state 81
    OPERATOR_MINUS  shift, and go to state 82
    OPERATOR_MULT   shift, and go to state 83
    OPERATOR_DIV    shift, and go to state 84
    ','             shift, and go to state 137

    $default  reduce using rule 60 (expr_cont_list)

    expr_cont_list  go to state 159


State 153

   49 command: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' • command

    KW_IF          shift, and go to state 22
    KW_WHILE       shift, and go to state 23
    KW_LOOP        shift, and go to state 24
    KW_READ        shift, and go to state 25
    KW_PRINT       shift, and go to state 26
    KW_RETURN      shift, and go to state 27
    TK_IDENTIFIER  shift, and go to state 28
    '{'            shift, and go to state 11

    KW_IF          [reduce using rule 53 (command)]
    KW_WHILE       [reduce using rule 53 (command)]
    KW_LOOP        [reduce using rule 53 (command)]
    KW_READ        [reduce using rule 53 (command)]
    KW_PRINT       [reduce using rule 53 (command)]
    KW_RETURN      [reduce using rule 53 (command)]
    TK_IDENTIFIER  [reduce using rule 53 (command)]
    '{'            [reduce using rule 53 (command)]
    $default       reduce using rule 53 (command)

    command_block  go to state 30
    command        go to state 160


State 154

   35 function_header_params: ',' TK_IDENTIFIER '=' KW_CHAR maybe_function_header_params •

    $default  reduce using rule 35 (function_header_params)


State 155

   37 function_header_params: ',' TK_IDENTIFIER '=' KW_INT maybe_function_header_params •

    $default  reduce using rule 37 (function_header_params)


State 156

   38 function_header_params: ',' TK_IDENTIFIER '=' KW_FLOAT maybe_function_header_params •

    $default  reduce using rule 38 (function_header_params)


State 157

   36 function_header_params: ',' TK_IDENTIFIER '=' KW_BOOL maybe_function_header_params •

    $default  reduce using rule 36 (function_header_params)


State 158

   57 maybe_else: KW_ELSE command •

    $default  reduce using rule 57 (maybe_else)


State 159

   59 expr_cont_list: ',' expr expr_cont_list •

    $default  reduce using rule 59 (expr_cont_list)


State 160

   49 command: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command •

    $default  reduce using rule 49 (command)
