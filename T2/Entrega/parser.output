Terminals unused in grammar

    TOKEN_ERROR


State 131 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_var_declaration ';' program
    2        | function ';' program
    3        | %empty

    4 global_var_declaration: TK_IDENTIFIER '=' type global_var_or_vet_declaration

    5 global_var_or_vet_declaration: ':' lit
    6                              | '[' LIT_INTEGER ']' vet_maybe_value

    7 type: KW_CHAR
    8     | KW_BOOL
    9     | KW_INT
   10     | KW_FLOAT

   11 lit: LIT_CHAR
   12    | LIT_INTEGER
   13    | LIT_FLOAT
   14    | LIT_TRUE
   15    | LIT_FALSE

   16 vet_maybe_value: ':' vet_value
   17                | %empty

   18 vet_value: LIT_INTEGER vet_value
   19          | LIT_FLOAT vet_value
   20          | LIT_CHAR vet_value
   21          | LIT_TRUE vet_value
   22          | LIT_FALSE vet_value
   23          | LIT_INTEGER
   24          | LIT_FLOAT
   25          | LIT_CHAR
   26          | LIT_TRUE
   27          | LIT_FALSE

   28 function: function_header command_block

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type

   30 maybe_function_header_params: function_header_params
   31                             | %empty

   32 function_header_params: TK_IDENTIFIER '=' type ',' function_header_params
   33                       | TK_IDENTIFIER '=' type

   34 command_block: '{' command_seq '}'

   35 command_seq: command command_seq
   36            | %empty

   37 command: command_attr
   38        | KW_READ TK_IDENTIFIER
   39        | KW_RETURN expr
   40        | command_flow
   41        | command_block
   42        | command_print

   43 command_print: KW_PRINT print_elem maybe_print_elems

   44 print_elem: LIT_STRING
   45           | expr

   46 maybe_print_elems: ',' print_elem maybe_print_elems
   47                  | %empty

   48 command_attr: TK_IDENTIFIER '=' expr
   49             | TK_IDENTIFIER '[' expr ']' '=' expr

   50 command_flow: KW_IF '(' expr ')' KW_THEN command maybe_else
   51             | KW_WHILE '(' expr ')' command
   52             | KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command

   53 maybe_else: KW_ELSE command
   54           | %empty

   55 expr_cont_list: ',' expr expr_cont_list
   56               | %empty

   57 expr: expr OPERATOR_PLUS expr
   58     | expr OPERATOR_MINUS expr
   59     | expr OPERATOR_MULT expr
   60     | expr OPERATOR_DIV expr
   61     | expr OPERATOR_LE expr
   62     | expr OPERATOR_LT expr
   63     | expr OPERATOR_GE expr
   64     | expr OPERATOR_GT expr
   65     | expr OPERATOR_EQ expr
   66     | expr OPERATOR_DIF expr
   67     | expr OPERATOR_OR expr
   68     | expr OPERATOR_AND expr
   69     | '(' expr ')'
   70     | OPERATOR_NOT expr
   71     | TK_IDENTIFIER opt_array_index_or_function_call
   72     | lit

   73 opt_array_index_or_function_call: '[' expr ']'
   74                                 | '(' function_call_args ')'
   75                                 | %empty

   76 function_call_args: expr
   77                   | expr ',' function_call_args


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 29 50 51 52 69 74
    ')' (41) 29 50 51 52 69 74
    ',' (44) 32 46 55 77
    ':' (58) 5 16 52
    ';' (59) 1 2
    '=' (61) 4 29 32 33 48 49
    '[' (91) 6 49 73
    ']' (93) 6 49 73
    '{' (123) 34
    '}' (125) 34
    error (256)
    KW_CHAR (258) 7
    KW_INT (259) 9
    KW_FLOAT (260) 10
    KW_BOOL (261) 8
    KW_IF (262) 50
    KW_THEN (263) 50
    KW_ELSE (264) 53
    KW_WHILE (265) 51
    KW_LOOP (266) 52
    KW_READ (267) 38
    KW_PRINT (268) 43
    KW_RETURN (269) 39
    OPERATOR_LE (270) 61
    OPERATOR_LT (271) 62
    OPERATOR_GE (272) 63
    OPERATOR_GT (273) 64
    OPERATOR_EQ (274) 65
    OPERATOR_DIF (275) 66
    OPERATOR_OR (276) 67
    OPERATOR_AND (277) 68
    OPERATOR_NOT (278) 70
    OPERATOR_PLUS (279) 57
    OPERATOR_MINUS (280) 58
    OPERATOR_MULT (281) 59
    OPERATOR_DIV (282) 60
    TK_IDENTIFIER (283) 4 29 32 33 38 48 49 52 71
    LIT_INTEGER (284) 6 12 18 23
    LIT_FLOAT (285) 13 19 24
    LIT_TRUE (286) 14 21 26
    LIT_FALSE (287) 15 22 27
    LIT_CHAR (288) 11 20 25
    LIT_STRING (289) 44
    TOKEN_ERROR (290)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3
        on right: 0 1 2
    global_var_declaration (48)
        on left: 4
        on right: 1
    global_var_or_vet_declaration (49)
        on left: 5 6
        on right: 4
    type (50)
        on left: 7 8 9 10
        on right: 4 29 32 33
    lit (51)
        on left: 11 12 13 14 15
        on right: 5 72
    vet_maybe_value (52)
        on left: 16 17
        on right: 6
    vet_value (53)
        on left: 18 19 20 21 22 23 24 25 26 27
        on right: 16 18 19 20 21 22
    function (54)
        on left: 28
        on right: 2
    function_header (55)
        on left: 29
        on right: 28
    maybe_function_header_params (56)
        on left: 30 31
        on right: 29
    function_header_params (57)
        on left: 32 33
        on right: 30 32
    command_block (58)
        on left: 34
        on right: 28 41
    command_seq (59)
        on left: 35 36
        on right: 34 35
    command (60)
        on left: 37 38 39 40 41 42
        on right: 35 50 51 52 53
    command_print (61)
        on left: 43
        on right: 42
    print_elem (62)
        on left: 44 45
        on right: 43 46
    maybe_print_elems (63)
        on left: 46 47
        on right: 43 46
    command_attr (64)
        on left: 48 49
        on right: 37
    command_flow (65)
        on left: 50 51 52
        on right: 40
    maybe_else (66)
        on left: 53 54
        on right: 50
    expr_cont_list (67)
        on left: 55 56
        on right: 52 55
    expr (68)
        on left: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
        on right: 39 45 48 49 50 51 52 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 73 76 77
    opt_array_index_or_function_call (69)
        on left: 73 74 75
        on right: 71
    function_call_args (70)
        on left: 76 77
        on right: 74 77


State 0

    0 $accept: • program $end

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 2
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 1

    4 global_var_declaration: TK_IDENTIFIER • '=' type global_var_or_vet_declaration
   29 function_header: TK_IDENTIFIER • '(' maybe_function_header_params ')' '=' type

    '('  shift, and go to state 6
    '='  shift, and go to state 7


State 2

    0 $accept: program • $end

    $end  shift, and go to state 8


State 3

    1 program: global_var_declaration • ';' program

    ';'  shift, and go to state 9


State 4

    2 program: function • ';' program

    ';'  shift, and go to state 10


State 5

   28 function: function_header • command_block

    '{'  shift, and go to state 11

    command_block  go to state 12


State 6

   29 function_header: TK_IDENTIFIER '(' • maybe_function_header_params ')' '=' type

    TK_IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 31 (maybe_function_header_params)

    maybe_function_header_params  go to state 14
    function_header_params        go to state 15


State 7

    4 global_var_declaration: TK_IDENTIFIER '=' • type global_var_or_vet_declaration

    KW_CHAR   shift, and go to state 16
    KW_INT    shift, and go to state 17
    KW_FLOAT  shift, and go to state 18
    KW_BOOL   shift, and go to state 19

    type  go to state 20


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: global_var_declaration ';' • program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 21
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 10

    2 program: function ';' • program

    TK_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (program)

    program                 go to state 22
    global_var_declaration  go to state 3
    function                go to state 4
    function_header         go to state 5


State 11

   34 command_block: '{' • command_seq '}'

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    $default  reduce using rule 36 (command_seq)

    command_block  go to state 30
    command_seq    go to state 31
    command        go to state 32
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 12

   28 function: function_header command_block •

    $default  reduce using rule 28 (function)


State 13

   32 function_header_params: TK_IDENTIFIER • '=' type ',' function_header_params
   33                       | TK_IDENTIFIER • '=' type

    '='  shift, and go to state 36


State 14

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params • ')' '=' type

    ')'  shift, and go to state 37


State 15

   30 maybe_function_header_params: function_header_params •

    $default  reduce using rule 30 (maybe_function_header_params)


State 16

    7 type: KW_CHAR •

    $default  reduce using rule 7 (type)


State 17

    9 type: KW_INT •

    $default  reduce using rule 9 (type)


State 18

   10 type: KW_FLOAT •

    $default  reduce using rule 10 (type)


State 19

    8 type: KW_BOOL •

    $default  reduce using rule 8 (type)


State 20

    4 global_var_declaration: TK_IDENTIFIER '=' type • global_var_or_vet_declaration

    '['  shift, and go to state 38
    ':'  shift, and go to state 39

    global_var_or_vet_declaration  go to state 40


State 21

    1 program: global_var_declaration ';' program •

    $default  reduce using rule 1 (program)


State 22

    2 program: function ';' program •

    $default  reduce using rule 2 (program)


State 23

   50 command_flow: KW_IF • '(' expr ')' KW_THEN command maybe_else

    '('  shift, and go to state 41


State 24

   51 command_flow: KW_WHILE • '(' expr ')' command

    '('  shift, and go to state 42


State 25

   52 command_flow: KW_LOOP • '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command

    '('  shift, and go to state 43


State 26

   38 command: KW_READ • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 44


State 27

   43 command_print: KW_PRINT • print_elem maybe_print_elems

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    LIT_STRING     shift, and go to state 52
    '('            shift, and go to state 53

    lit         go to state 54
    print_elem  go to state 55
    expr        go to state 56


State 28

   39 command: KW_RETURN • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 57


State 29

   48 command_attr: TK_IDENTIFIER • '=' expr
   49             | TK_IDENTIFIER • '[' expr ']' '=' expr

    '['  shift, and go to state 58
    '='  shift, and go to state 59


State 30

   41 command: command_block •

    $default  reduce using rule 41 (command)


State 31

   34 command_block: '{' command_seq • '}'

    '}'  shift, and go to state 60


State 32

   35 command_seq: command • command_seq

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    $default  reduce using rule 36 (command_seq)

    command_block  go to state 30
    command_seq    go to state 61
    command        go to state 32
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 33

   42 command: command_print •

    $default  reduce using rule 42 (command)


State 34

   37 command: command_attr •

    $default  reduce using rule 37 (command)


State 35

   40 command: command_flow •

    $default  reduce using rule 40 (command)


State 36

   32 function_header_params: TK_IDENTIFIER '=' • type ',' function_header_params
   33                       | TK_IDENTIFIER '=' • type

    KW_CHAR   shift, and go to state 16
    KW_INT    shift, and go to state 17
    KW_FLOAT  shift, and go to state 18
    KW_BOOL   shift, and go to state 19

    type  go to state 62


State 37

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' • '=' type

    '='  shift, and go to state 63


State 38

    6 global_var_or_vet_declaration: '[' • LIT_INTEGER ']' vet_maybe_value

    LIT_INTEGER  shift, and go to state 64


State 39

    5 global_var_or_vet_declaration: ':' • lit

    LIT_INTEGER  shift, and go to state 47
    LIT_FLOAT    shift, and go to state 48
    LIT_TRUE     shift, and go to state 49
    LIT_FALSE    shift, and go to state 50
    LIT_CHAR     shift, and go to state 51

    lit  go to state 65


State 40

    4 global_var_declaration: TK_IDENTIFIER '=' type global_var_or_vet_declaration •

    $default  reduce using rule 4 (global_var_declaration)


State 41

   50 command_flow: KW_IF '(' • expr ')' KW_THEN command maybe_else

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 66


State 42

   51 command_flow: KW_WHILE '(' • expr ')' command

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 67


State 43

   52 command_flow: KW_LOOP '(' • TK_IDENTIFIER ':' expr expr_cont_list ')' command

    TK_IDENTIFIER  shift, and go to state 68


State 44

   38 command: KW_READ TK_IDENTIFIER •

    $default  reduce using rule 38 (command)


State 45

   70 expr: OPERATOR_NOT • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 69


State 46

   71 expr: TK_IDENTIFIER • opt_array_index_or_function_call

    '['  shift, and go to state 70
    '('  shift, and go to state 71

    $default  reduce using rule 75 (opt_array_index_or_function_call)

    opt_array_index_or_function_call  go to state 72


State 47

   12 lit: LIT_INTEGER •

    $default  reduce using rule 12 (lit)


State 48

   13 lit: LIT_FLOAT •

    $default  reduce using rule 13 (lit)


State 49

   14 lit: LIT_TRUE •

    $default  reduce using rule 14 (lit)


State 50

   15 lit: LIT_FALSE •

    $default  reduce using rule 15 (lit)


State 51

   11 lit: LIT_CHAR •

    $default  reduce using rule 11 (lit)


State 52

   44 print_elem: LIT_STRING •

    $default  reduce using rule 44 (print_elem)


State 53

   69 expr: '(' • expr ')'

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 73


State 54

   72 expr: lit •

    $default  reduce using rule 72 (expr)


State 55

   43 command_print: KW_PRINT print_elem • maybe_print_elems

    ','  shift, and go to state 74

    $default  reduce using rule 47 (maybe_print_elems)

    maybe_print_elems  go to state 75


State 56

   45 print_elem: expr •
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 45 (print_elem)


State 57

   39 command: KW_RETURN expr •
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 39 (command)


State 58

   49 command_attr: TK_IDENTIFIER '[' • expr ']' '=' expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 88


State 59

   48 command_attr: TK_IDENTIFIER '=' • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 89


State 60

   34 command_block: '{' command_seq '}' •

    $default  reduce using rule 34 (command_block)


State 61

   35 command_seq: command command_seq •

    $default  reduce using rule 35 (command_seq)


State 62

   32 function_header_params: TK_IDENTIFIER '=' type • ',' function_header_params
   33                       | TK_IDENTIFIER '=' type •

    ','  shift, and go to state 90

    $default  reduce using rule 33 (function_header_params)


State 63

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' • type

    KW_CHAR   shift, and go to state 16
    KW_INT    shift, and go to state 17
    KW_FLOAT  shift, and go to state 18
    KW_BOOL   shift, and go to state 19

    type  go to state 91


State 64

    6 global_var_or_vet_declaration: '[' LIT_INTEGER • ']' vet_maybe_value

    ']'  shift, and go to state 92


State 65

    5 global_var_or_vet_declaration: ':' lit •

    $default  reduce using rule 5 (global_var_or_vet_declaration)


State 66

   50 command_flow: KW_IF '(' expr • ')' KW_THEN command maybe_else
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ')'             shift, and go to state 93


State 67

   51 command_flow: KW_WHILE '(' expr • ')' command
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ')'             shift, and go to state 94


State 68

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER • ':' expr expr_cont_list ')' command

    ':'  shift, and go to state 95


State 69

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr
   70     | OPERATOR_NOT expr •

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 70 (expr)


State 70

   73 opt_array_index_or_function_call: '[' • expr ']'

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 96


State 71

   74 opt_array_index_or_function_call: '(' • function_call_args ')'

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit                 go to state 54
    expr                go to state 97
    function_call_args  go to state 98


State 72

   71 expr: TK_IDENTIFIER opt_array_index_or_function_call •

    $default  reduce using rule 71 (expr)


State 73

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr
   69     | '(' expr • ')'

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ')'             shift, and go to state 99


State 74

   46 maybe_print_elems: ',' • print_elem maybe_print_elems

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    LIT_STRING     shift, and go to state 52
    '('            shift, and go to state 53

    lit         go to state 54
    print_elem  go to state 100
    expr        go to state 56


State 75

   43 command_print: KW_PRINT print_elem maybe_print_elems •

    $default  reduce using rule 43 (command_print)


State 76

   61 expr: expr OPERATOR_LE • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 101


State 77

   62 expr: expr OPERATOR_LT • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 102


State 78

   63 expr: expr OPERATOR_GE • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 103


State 79

   64 expr: expr OPERATOR_GT • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 104


State 80

   65 expr: expr OPERATOR_EQ • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 105


State 81

   66 expr: expr OPERATOR_DIF • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 106


State 82

   67 expr: expr OPERATOR_OR • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 107


State 83

   68 expr: expr OPERATOR_AND • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 108


State 84

   57 expr: expr OPERATOR_PLUS • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 109


State 85

   58 expr: expr OPERATOR_MINUS • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 110


State 86

   59 expr: expr OPERATOR_MULT • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 111


State 87

   60 expr: expr OPERATOR_DIV • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 112


State 88

   49 command_attr: TK_IDENTIFIER '[' expr • ']' '=' expr
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ']'             shift, and go to state 113


State 89

   48 command_attr: TK_IDENTIFIER '=' expr •
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 48 (command_attr)


State 90

   32 function_header_params: TK_IDENTIFIER '=' type ',' • function_header_params

    TK_IDENTIFIER  shift, and go to state 13

    function_header_params  go to state 114


State 91

   29 function_header: TK_IDENTIFIER '(' maybe_function_header_params ')' '=' type •

    $default  reduce using rule 29 (function_header)


State 92

    6 global_var_or_vet_declaration: '[' LIT_INTEGER ']' • vet_maybe_value

    ':'  shift, and go to state 115

    $default  reduce using rule 17 (vet_maybe_value)

    vet_maybe_value  go to state 116


State 93

   50 command_flow: KW_IF '(' expr ')' • KW_THEN command maybe_else

    KW_THEN  shift, and go to state 117


State 94

   51 command_flow: KW_WHILE '(' expr ')' • command

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    command_block  go to state 30
    command        go to state 118
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 95

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER ':' • expr expr_cont_list ')' command

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 119


State 96

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr
   73 opt_array_index_or_function_call: '[' expr • ']'

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ']'             shift, and go to state 120


State 97

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr
   76 function_call_args: expr •
   77                   | expr • ',' function_call_args

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ','             shift, and go to state 121

    $default  reduce using rule 76 (function_call_args)


State 98

   74 opt_array_index_or_function_call: '(' function_call_args • ')'

    ')'  shift, and go to state 122


State 99

   69 expr: '(' expr ')' •

    $default  reduce using rule 69 (expr)


State 100

   46 maybe_print_elems: ',' print_elem • maybe_print_elems

    ','  shift, and go to state 74

    $default  reduce using rule 47 (maybe_print_elems)

    maybe_print_elems  go to state 123


State 101

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   61     | expr OPERATOR_LE expr •
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 61 (expr)


State 102

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   62     | expr OPERATOR_LT expr •
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 62 (expr)


State 103

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   63     | expr OPERATOR_GE expr •
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 63 (expr)


State 104

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   64     | expr OPERATOR_GT expr •
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 64 (expr)


State 105

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   65     | expr OPERATOR_EQ expr •
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 65 (expr)


State 106

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   66     | expr OPERATOR_DIF expr •
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 66 (expr)


State 107

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   67     | expr OPERATOR_OR expr •
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 67 (expr)


State 108

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr
   68     | expr OPERATOR_AND expr •

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 68 (expr)


State 109

   57 expr: expr • OPERATOR_PLUS expr
   57     | expr OPERATOR_PLUS expr •
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_MULT  shift, and go to state 86
    OPERATOR_DIV   shift, and go to state 87

    $default  reduce using rule 57 (expr)


State 110

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   58     | expr OPERATOR_MINUS expr •
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_MULT  shift, and go to state 86
    OPERATOR_DIV   shift, and go to state 87

    $default  reduce using rule 58 (expr)


State 111

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   59     | expr OPERATOR_MULT expr •
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    $default  reduce using rule 59 (expr)


State 112

   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   60     | expr OPERATOR_DIV expr •
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    $default  reduce using rule 60 (expr)


State 113

   49 command_attr: TK_IDENTIFIER '[' expr ']' • '=' expr

    '='  shift, and go to state 124


State 114

   32 function_header_params: TK_IDENTIFIER '=' type ',' function_header_params •

    $default  reduce using rule 32 (function_header_params)


State 115

   16 vet_maybe_value: ':' • vet_value

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    vet_value  go to state 130


State 116

    6 global_var_or_vet_declaration: '[' LIT_INTEGER ']' vet_maybe_value •

    $default  reduce using rule 6 (global_var_or_vet_declaration)


State 117

   50 command_flow: KW_IF '(' expr ')' KW_THEN • command maybe_else

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    command_block  go to state 30
    command        go to state 131
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 118

   51 command_flow: KW_WHILE '(' expr ')' command •

    $default  reduce using rule 51 (command_flow)


State 119

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER ':' expr • expr_cont_list ')' command
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ','             shift, and go to state 132

    $default  reduce using rule 56 (expr_cont_list)

    expr_cont_list  go to state 133


State 120

   73 opt_array_index_or_function_call: '[' expr ']' •

    $default  reduce using rule 73 (opt_array_index_or_function_call)


State 121

   77 function_call_args: expr ',' • function_call_args

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit                 go to state 54
    expr                go to state 97
    function_call_args  go to state 134


State 122

   74 opt_array_index_or_function_call: '(' function_call_args ')' •

    $default  reduce using rule 74 (opt_array_index_or_function_call)


State 123

   46 maybe_print_elems: ',' print_elem maybe_print_elems •

    $default  reduce using rule 46 (maybe_print_elems)


State 124

   49 command_attr: TK_IDENTIFIER '[' expr ']' '=' • expr

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 135


State 125

   18 vet_value: LIT_INTEGER • vet_value
   23          | LIT_INTEGER •

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    $default  reduce using rule 23 (vet_value)

    vet_value  go to state 136


State 126

   19 vet_value: LIT_FLOAT • vet_value
   24          | LIT_FLOAT •

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    $default  reduce using rule 24 (vet_value)

    vet_value  go to state 137


State 127

   21 vet_value: LIT_TRUE • vet_value
   26          | LIT_TRUE •

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    $default  reduce using rule 26 (vet_value)

    vet_value  go to state 138


State 128

   22 vet_value: LIT_FALSE • vet_value
   27          | LIT_FALSE •

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    $default  reduce using rule 27 (vet_value)

    vet_value  go to state 139


State 129

   20 vet_value: LIT_CHAR • vet_value
   25          | LIT_CHAR •

    LIT_INTEGER  shift, and go to state 125
    LIT_FLOAT    shift, and go to state 126
    LIT_TRUE     shift, and go to state 127
    LIT_FALSE    shift, and go to state 128
    LIT_CHAR     shift, and go to state 129

    $default  reduce using rule 25 (vet_value)

    vet_value  go to state 140


State 130

   16 vet_maybe_value: ':' vet_value •

    $default  reduce using rule 16 (vet_maybe_value)


State 131

   50 command_flow: KW_IF '(' expr ')' KW_THEN command • maybe_else

    KW_ELSE  shift, and go to state 141

    KW_ELSE   [reduce using rule 54 (maybe_else)]
    $default  reduce using rule 54 (maybe_else)

    maybe_else  go to state 142


State 132

   55 expr_cont_list: ',' • expr expr_cont_list

    OPERATOR_NOT   shift, and go to state 45
    TK_IDENTIFIER  shift, and go to state 46
    LIT_INTEGER    shift, and go to state 47
    LIT_FLOAT      shift, and go to state 48
    LIT_TRUE       shift, and go to state 49
    LIT_FALSE      shift, and go to state 50
    LIT_CHAR       shift, and go to state 51
    '('            shift, and go to state 53

    lit   go to state 54
    expr  go to state 143


State 133

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list • ')' command

    ')'  shift, and go to state 144


State 134

   77 function_call_args: expr ',' function_call_args •

    $default  reduce using rule 77 (function_call_args)


State 135

   49 command_attr: TK_IDENTIFIER '[' expr ']' '=' expr •
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87

    $default  reduce using rule 49 (command_attr)


State 136

   18 vet_value: LIT_INTEGER vet_value •

    $default  reduce using rule 18 (vet_value)


State 137

   19 vet_value: LIT_FLOAT vet_value •

    $default  reduce using rule 19 (vet_value)


State 138

   21 vet_value: LIT_TRUE vet_value •

    $default  reduce using rule 21 (vet_value)


State 139

   22 vet_value: LIT_FALSE vet_value •

    $default  reduce using rule 22 (vet_value)


State 140

   20 vet_value: LIT_CHAR vet_value •

    $default  reduce using rule 20 (vet_value)


State 141

   53 maybe_else: KW_ELSE • command

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    command_block  go to state 30
    command        go to state 145
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 142

   50 command_flow: KW_IF '(' expr ')' KW_THEN command maybe_else •

    $default  reduce using rule 50 (command_flow)


State 143

   55 expr_cont_list: ',' expr • expr_cont_list
   57 expr: expr • OPERATOR_PLUS expr
   58     | expr • OPERATOR_MINUS expr
   59     | expr • OPERATOR_MULT expr
   60     | expr • OPERATOR_DIV expr
   61     | expr • OPERATOR_LE expr
   62     | expr • OPERATOR_LT expr
   63     | expr • OPERATOR_GE expr
   64     | expr • OPERATOR_GT expr
   65     | expr • OPERATOR_EQ expr
   66     | expr • OPERATOR_DIF expr
   67     | expr • OPERATOR_OR expr
   68     | expr • OPERATOR_AND expr

    OPERATOR_LE     shift, and go to state 76
    OPERATOR_LT     shift, and go to state 77
    OPERATOR_GE     shift, and go to state 78
    OPERATOR_GT     shift, and go to state 79
    OPERATOR_EQ     shift, and go to state 80
    OPERATOR_DIF    shift, and go to state 81
    OPERATOR_OR     shift, and go to state 82
    OPERATOR_AND    shift, and go to state 83
    OPERATOR_PLUS   shift, and go to state 84
    OPERATOR_MINUS  shift, and go to state 85
    OPERATOR_MULT   shift, and go to state 86
    OPERATOR_DIV    shift, and go to state 87
    ','             shift, and go to state 132

    $default  reduce using rule 56 (expr_cont_list)

    expr_cont_list  go to state 146


State 144

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' • command

    KW_IF          shift, and go to state 23
    KW_WHILE       shift, and go to state 24
    KW_LOOP        shift, and go to state 25
    KW_READ        shift, and go to state 26
    KW_PRINT       shift, and go to state 27
    KW_RETURN      shift, and go to state 28
    TK_IDENTIFIER  shift, and go to state 29
    '{'            shift, and go to state 11

    command_block  go to state 30
    command        go to state 147
    command_print  go to state 33
    command_attr   go to state 34
    command_flow   go to state 35


State 145

   53 maybe_else: KW_ELSE command •

    $default  reduce using rule 53 (maybe_else)


State 146

   55 expr_cont_list: ',' expr expr_cont_list •

    $default  reduce using rule 55 (expr_cont_list)


State 147

   52 command_flow: KW_LOOP '(' TK_IDENTIFIER ':' expr expr_cont_list ')' command •

    $default  reduce using rule 52 (command_flow)
